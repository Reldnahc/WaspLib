(*
# PortalNexus
Portal Nexus interface by Reldnahc.
*)

{$DEFINE RELD_PORTAL_NEXUS_INCLUDED}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}

type
  TRSPortalNexus = type TRSTitledInterface;


function TRSPortalNexus.ScrollAreaFunction(): TBox;
begin
  Result := Box(Self.Bounds().X1 + 29, Self.Bounds().Y1 + 49, Self.Bounds().X2 - 197, Self.Bounds().Y2 - 20);
end;

procedure TRSPortalNexus.Setup(); override;
begin
  inherited;
  Self.Name := 'Portal Nexus';
  Self.GetScrollAreaFunction := @Self.ScrollAreaFunction;
end;

(*
## TRSPortalNexus.ClickPortalDestination
```pascal

function TRSPortalNexus.ClickPortalDestination(destination: String): Boolean;
```

Finds the destination in the scroll area and clicks it.

Example:
```pascal
 WriteLn TRSPortalNexus.ClickPortalDestination(destination: String);
```
*)
function TRSPortalNexus.ClickPortalDestination(destination: String): Boolean;
var
  box: TBox;
begin
  if Self.FindPortalDestination(destination, box) then
  begin
    Mouse.Move(box);
    Mouse.Click(MOUSE_LEFT);
    Result := True;
  end;
end;

(*
## TRSPortalNexus.FindPortalDestinations
```pascal
function TRSPortalNexus.FindPortalDestinations(out boxes: TBoxArray): TStringArray;
```

Returns the visible destinations in the portal nexus interface.

Example:
```pascal
 WriteLn TRSPortalNexus.FindPortalDestinations();
```
*)
function TRSPortalNexus.FindPortalDestinations(out boxes: TBoxArray): TStringArray; overload;
const
  COLORS := [2004990, 1803744];
var
  tpa: TPointArray;
  atpa: T2DPointArray;
  i, tmp: Int32;
  str: String;
begin
  if SRL.FindColors(tpa, CTS0(1937135, 15), Self.ScrollAreaFunction() ) = 0 then
    Exit;

  atpa := tpa.Cluster(11, 1);
  atpa.SortByY();

  boxes := atpa.ToTBA();
  for i := 0 to High(boxes) do
  begin
    boxes[i].Y1 := boxes[i].Y1 - 3;
    boxes[i].Y2 := boxes[i].Y2 + 3;
    boxes[i].X1 := boxes[i].X1 + 5;
    boxes[i].X2 := boxes[i].X2 + 10;
    str := OCR.Recognize(boxes[i], TOCRColorFilter.Create(COLORS), RS_FONT_PLAIN_12);
    Result += str;
  end;
end;

(*
## TRSPortalNexus.FindPortalDestination
```pascal
function TRSPortalNexus.FindPortalDestination(destination: String; out b: TBox): Boolean;
function TRSPortalNexus.FindPortalDestination(destination: String): Boolean; overload;
```

Finds the destination specified in the portal nexus.

Example:
```pascal
 WriteLn TRSPortalNexus.FindPortalDestination('Falador');
```
*)
function TRSPortalNexus.FindPortalDestination(destination: String; out b: TBox): Boolean;
  function _DoScrolling(destination: String; direction: Boolean; out b: TBox): Boolean;
  var
    limit, i: Int32;
    boxes: TBoxArray;
  begin
    if direction then
      limit := 100;

    Mouse.Move(Self.ScrollAreaFunction(), True);
    while Self.CanScroll() and (Self.GetScrollPosition() <> limit) do
    begin
      Mouse.Scroll(Antiban.GetUniqueInt(4, 2, 7), direction);
      i := Self.FindPortalDestinations(boxes).Find(destination);
      if i > -1 then
      begin
        b := boxes[i];
        Exit(True);
      end;
      Antiban.BioWait(150, 300);
    end;
  end;

var
  i, scroll: Int32;
  direction: Boolean;
  boxes: TBoxArray;
begin

  i := Self.FindPortalDestinations(boxes).Find(destination);
  if i > -1 then
  begin
    b := boxes[i];
    Exit(True);
  end;

  scroll := Self.GetScrollPosition();
  direction := InRange(scroll, 0, 3);
  if not direction then
    direction := not InRange(scroll, 97, 100) and Antiban.BioDice();

  if _DoScrolling(destination, direction, b) then
    Exit(True);

  if InRange(scroll, 0, 3) or InRange(scroll, 97, 100) then
    Exit; //scrolled everything and was not found.

  Result := _DoScrolling(destination, not direction, b);
end;

function TRSPortalNexus.FindPortalDestination(destination: String): Boolean; overload;
var
  b: TBox;
begin
  Result := Self.FindPortalDestination(destination, b);
end;

procedure TRSPortalNexus.SetupAlignment(mode: ERSClientMode); override;
begin
  inherited;

  case mode of
    ERSClientMode.FIXED:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1];
        Self.Alignment.Bottom := [@InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 490;
        Self.Alignment.Center.MaxHeight := 315;
      end;

    ERSClientMode.RESIZABLE_CLASSIC, ERSClientMode.RESIZABLE_MODERN:
      begin
        Self.Alignment.Left := [@InterfaceArea.X1];
        Self.Alignment.Right := [@InterfaceArea.X2];
        Self.Alignment.Top := [@InterfaceArea.Y1, -1];
        Self.Alignment.Bottom := [@InterfaceArea.Y2];
        Self.Alignment.Center.MaxWidth := 490;
        Self.Alignment.Center.MaxHeight := 315;
      end;
  end;
end;

function TRSPortalNexus.IsOpen(): Boolean;
begin
  Result := Self.IsTitle(Self.Name);
end;

function TRSPortalNexus.IsOpen(waitTime: Int32): Boolean; overload;
begin
  Result := WaitUntil(Self.IsOpen(), SRL.TruncatedGauss(50, 1500), waitTime);
end;

function TRSPortalNexus.Close(pressEscape: Boolean = False): Boolean;
begin
  if not Self.IsOpen() then
    Exit(True);

  Result := Self.ClickCloseButton(pressEscape) and WaitUntil(not Self.IsOpen(), SRL.TruncatedGauss(50, 1500), Random(1500, 2000));
end;

var
 PortalNexus : TRSPortalNexus;

procedure TRSClient.ClientModeChanged(); override;
begin
  inherited;

  PortalNexus.SetupAlignment(Self.Mode);
end;

procedure TSRL.Setup(); override;
begin
  inherited;

  PortalNexus.Setup();
end;
